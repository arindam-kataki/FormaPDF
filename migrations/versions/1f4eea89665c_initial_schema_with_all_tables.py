"""Initial schema with all tables

Revision ID: 1f4eea89665c
Revises: 
Create Date: 2025-08-06 22:10:58.298163

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1f4eea89665c'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Apply database schema changes."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('assemblies',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('guid', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('researcher', sa.String(length=255), nullable=True),
    sa.Column('research_type', sa.String(length=100), nullable=True),
    sa.Column('keywords', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_accessed', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ai_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('document_count', sa.Integer(), nullable=False),
    sa.Column('annotation_count', sa.Integer(), nullable=False),
    sa.Column('ai_conversation_count', sa.Integer(), nullable=False),
    sa.Column('storage_path', sa.String(length=500), nullable=True),
    sa.Column('total_size_bytes', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('guid')
    )
    op.create_index('idx_assembly_active', 'assemblies', ['is_active', 'is_archived'], unique=False)
    op.create_index('idx_assembly_created', 'assemblies', ['created_at'], unique=False)
    op.create_index('idx_assembly_guid', 'assemblies', ['guid'], unique=False)
    op.create_index('idx_assembly_researcher', 'assemblies', ['researcher'], unique=False)
    op.create_table('assembly_notes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('assembly_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('note_type', sa.String(length=50), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('is_pinned', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['assembly_id'], ['assemblies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_assembly_note_assembly', 'assembly_notes', ['assembly_id'], unique=False)
    op.create_index('idx_assembly_note_created', 'assembly_notes', ['created_at'], unique=False)
    op.create_index('idx_assembly_note_type', 'assembly_notes', ['note_type'], unique=False)
    op.create_table('documents',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('assembly_id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(length=500), nullable=False),
    sa.Column('original_filename', sa.String(length=500), nullable=True),
    sa.Column('file_type', sa.String(length=50), nullable=False),
    sa.Column('file_path', sa.String(length=1000), nullable=True),
    sa.Column('content_hash', sa.String(length=64), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('page_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_accessed', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('extracted_text', sa.Text(), nullable=True),
    sa.Column('is_processed', sa.Boolean(), nullable=True),
    sa.Column('is_ocr_complete', sa.Boolean(), nullable=True),
    sa.Column('is_indexed', sa.Boolean(), nullable=True),
    sa.Column('processing_errors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('annotation_count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['assembly_id'], ['assemblies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('assembly_id', 'content_hash', name='uq_assembly_document_hash')
    )
    op.create_index('idx_document_assembly', 'documents', ['assembly_id'], unique=False)
    op.create_index('idx_document_hash', 'documents', ['content_hash'], unique=False)
    op.create_index('idx_document_type', 'documents', ['file_type'], unique=False)
    op.create_index(op.f('ix_documents_content_hash'), 'documents', ['content_hash'], unique=False)
    op.create_table('annotations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('page_number', sa.Integer(), nullable=False),
    sa.Column('x1', sa.Float(), nullable=False),
    sa.Column('y1', sa.Float(), nullable=False),
    sa.Column('x2', sa.Float(), nullable=False),
    sa.Column('y2', sa.Float(), nullable=False),
    sa.Column('selected_text', sa.Text(), nullable=True),
    sa.Column('annotation_text', sa.Text(), nullable=True),
    sa.Column('annotation_type', sa.String(length=50), nullable=True),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('opacity', sa.Float(), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('is_resolved', sa.Boolean(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.CheckConstraint('x1 >= 0 AND x1 <= 1', name='check_x1_bounds'),
    sa.CheckConstraint('x2 > x1', name='check_x_order'),
    sa.CheckConstraint('x2 >= 0 AND x2 <= 1', name='check_x2_bounds'),
    sa.CheckConstraint('y1 >= 0 AND y1 <= 1', name='check_y1_bounds'),
    sa.CheckConstraint('y2 > y1', name='check_y_order'),
    sa.CheckConstraint('y2 >= 0 AND y2 <= 1', name='check_y2_bounds'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_annotation_created', 'annotations', ['created_at'], unique=False)
    op.create_index('idx_annotation_document', 'annotations', ['document_id'], unique=False)
    op.create_index('idx_annotation_page', 'annotations', ['document_id', 'page_number'], unique=False)
    op.create_index('idx_annotation_type', 'annotations', ['annotation_type'], unique=False)
    op.create_table('document_embeddings',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('chunk_text', sa.Text(), nullable=False),
    sa.Column('chunk_tokens', sa.Integer(), nullable=True),
    sa.Column('embedding', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('embedding_model', sa.String(length=100), nullable=True),
    sa.Column('embedding_dimension', sa.Integer(), nullable=True),
    sa.Column('page_numbers', postgresql.ARRAY(sa.Integer()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('document_id', 'chunk_index', name='uq_document_chunk')
    )
    op.create_index('idx_embedding_chunk', 'document_embeddings', ['document_id', 'chunk_index'], unique=False)
    op.create_index('idx_embedding_document', 'document_embeddings', ['document_id'], unique=False)
    op.create_table('user_toc',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('assembly_id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('page_number', sa.Integer(), nullable=True),
    sa.Column('section_number', sa.String(length=50), nullable=True),
    sa.Column('level', sa.Integer(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('order_index', sa.Integer(), nullable=False),
    sa.Column('entry_type', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['assembly_id'], ['assemblies.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['user_toc.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_toc_assembly', 'user_toc', ['assembly_id'], unique=False)
    op.create_index('idx_toc_document', 'user_toc', ['document_id'], unique=False)
    op.create_index('idx_toc_order', 'user_toc', ['assembly_id', 'order_index'], unique=False)
    op.create_table('ai_conversations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('annotation_id', sa.Integer(), nullable=False),
    sa.Column('messages', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('context', sa.Text(), nullable=True),
    sa.Column('ai_provider', sa.String(length=50), nullable=False),
    sa.Column('model_name', sa.String(length=100), nullable=True),
    sa.Column('model_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('total_tokens', sa.Integer(), nullable=True),
    sa.Column('prompt_tokens', sa.Integer(), nullable=True),
    sa.Column('completion_tokens', sa.Integer(), nullable=True),
    sa.Column('cost_estimate', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('key_insights', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['annotation_id'], ['annotations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ai_conversation_annotation', 'ai_conversations', ['annotation_id'], unique=False)
    op.create_index('idx_ai_conversation_created', 'ai_conversations', ['created_at'], unique=False)
    op.create_index('idx_ai_conversation_provider', 'ai_conversations', ['ai_provider'], unique=False)
    op.create_table('cross_references',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('source_annotation_id', sa.Integer(), nullable=False),
    sa.Column('target_annotation_id', sa.Integer(), nullable=False),
    sa.Column('reference_type', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.CheckConstraint('source_annotation_id != target_annotation_id', name='check_different_annotations'),
    sa.ForeignKeyConstraint(['source_annotation_id'], ['annotations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_annotation_id'], ['annotations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_annotation_id', 'target_annotation_id', name='uq_cross_reference')
    )
    op.create_index('idx_cross_ref_source', 'cross_references', ['source_annotation_id'], unique=False)
    op.create_index('idx_cross_ref_target', 'cross_references', ['target_annotation_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Revert database schema changes."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_cross_ref_target', table_name='cross_references')
    op.drop_index('idx_cross_ref_source', table_name='cross_references')
    op.drop_table('cross_references')
    op.drop_index('idx_ai_conversation_provider', table_name='ai_conversations')
    op.drop_index('idx_ai_conversation_created', table_name='ai_conversations')
    op.drop_index('idx_ai_conversation_annotation', table_name='ai_conversations')
    op.drop_table('ai_conversations')
    op.drop_index('idx_toc_order', table_name='user_toc')
    op.drop_index('idx_toc_document', table_name='user_toc')
    op.drop_index('idx_toc_assembly', table_name='user_toc')
    op.drop_table('user_toc')
    op.drop_index('idx_embedding_document', table_name='document_embeddings')
    op.drop_index('idx_embedding_chunk', table_name='document_embeddings')
    op.drop_table('document_embeddings')
    op.drop_index('idx_annotation_type', table_name='annotations')
    op.drop_index('idx_annotation_page', table_name='annotations')
    op.drop_index('idx_annotation_document', table_name='annotations')
    op.drop_index('idx_annotation_created', table_name='annotations')
    op.drop_table('annotations')
    op.drop_index(op.f('ix_documents_content_hash'), table_name='documents')
    op.drop_index('idx_document_type', table_name='documents')
    op.drop_index('idx_document_hash', table_name='documents')
    op.drop_index('idx_document_assembly', table_name='documents')
    op.drop_table('documents')
    op.drop_index('idx_assembly_note_type', table_name='assembly_notes')
    op.drop_index('idx_assembly_note_created', table_name='assembly_notes')
    op.drop_index('idx_assembly_note_assembly', table_name='assembly_notes')
    op.drop_table('assembly_notes')
    op.drop_index('idx_assembly_researcher', table_name='assemblies')
    op.drop_index('idx_assembly_guid', table_name='assemblies')
    op.drop_index('idx_assembly_created', table_name='assemblies')
    op.drop_index('idx_assembly_active', table_name='assemblies')
    op.drop_table('assemblies')
    # ### end Alembic commands ###